/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Forms;

/**
 *
 * @author Mauricio
 */
import dao.DAOHabitacion;
import dao.DAOReserva;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.time.format.DateTimeFormatter;
import java.util.List;
import modelo.Cliente;
import modelo.Reserva;

public class HistorialClienteForm extends JFrame {

    private JTable tablaHistorial;
    private DefaultTableModel modeloTabla;
    private Cliente cliente;
    private DAOReserva daoReserva;
    private DAOHabitacion daoHabitacion;

    public HistorialClienteForm(Cliente cliente) {
        this.cliente = cliente;
        this.daoReserva = new DAOReserva();
        this.daoHabitacion = new DAOHabitacion();

        setTitle("Historial de Reservas del Cliente");
        setSize(800, 450);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLayout(new BorderLayout());

        modeloTabla = new DefaultTableModel(new String[]{"ID", "Habitación", "Ingreso", "Salida", "Estado"}, 0) {
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        tablaHistorial = new JTable(modeloTabla);
        JScrollPane scroll = new JScrollPane(tablaHistorial);
        add(scroll, BorderLayout.CENTER);

        cargarHistorial();

        tablaHistorial.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int fila = tablaHistorial.rowAtPoint(evt.getPoint());
                if (fila != -1) {
                    String estado = (String) modeloTabla.getValueAt(fila, 4);
                    if (estado.equalsIgnoreCase("Vigente")) {
                        int confirmar = JOptionPane.showConfirmDialog(
                            HistorialClienteForm.this,
                            "¿Deseas cancelar esta reserva?",
                            "Confirmar cancelación",
                            JOptionPane.YES_NO_OPTION
                        );
                        if (confirmar == JOptionPane.YES_OPTION) {
                            int idReserva = (int) modeloTabla.getValueAt(fila, 0);
                            boolean exito = daoReserva.cancelarReserva(idReserva);
                            if (exito) {
                                // Actualizar habitación a disponible
                                int idHabitacion = daoReserva.obtenerIdHabitacionPorReserva(idReserva);
                                daoHabitacion.actualizarEstado(idHabitacion, "Disponible");

                                JOptionPane.showMessageDialog(HistorialClienteForm.this, "Reserva cancelada con éxito.");
                                cargarHistorial();

                                // TODO: Notificar a CalendarioForm que refresque si está abierto (opcional)
                            } else {
                                JOptionPane.showMessageDialog(HistorialClienteForm.this, "Error al cancelar reserva.");
                            }
                        }
                    }
                }
            }
        });
    }

private void cargarHistorial() {
    modeloTabla.setRowCount(0); // limpia tabla antes de cargar

    List<Reserva> reservas = daoReserva.listarReservasPorCliente(cliente.getId());
    DateTimeFormatter formato = DateTimeFormatter.ofPattern("dd/MM/yyyy");

    for (Reserva r : reservas) {
        modeloTabla.addRow(new Object[]{
            r.getId(),
            r.getIdHabitacion(),  // <-- Aquí reemplazas la columna de la habitación
            r.getFechaEstadia().format(formato),
            r.getFechaEstadia().plusDays(1).format(formato), // Si la estadía es de 1 día
            r.getEstado()
        });
    }
}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
