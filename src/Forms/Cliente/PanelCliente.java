/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Forms.Cliente;

import Forms.CalendarioForm;
import Forms.CalendarioForm;
import Forms.HistorialClienteForm;
import dao.DAOHabitacion;
import java.util.List;
import modelo.Cliente;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import modelo.Habitacion;


public class PanelCliente extends javax.swing.JFrame {

private Cliente cliente;
private DefaultTableModel modelo;


     public PanelCliente(Cliente cliente) {
        this.cliente = cliente;
        initComponents();
        configurarTabla();
        cargarHabitacionesDisponibles();
        agregarEventoClick();
    }
   public PanelCliente() {
        initComponents();
    }

    private void configurarTabla() {
        String[] columnas = {"ID", "Tipo", "Precio", "Estado"};
        modelo = new DefaultTableModel(columnas, 0);
        tablaHabitaciones.setModel(modelo);
    this.tablaHabitaciones = tablaHabitaciones;
    }

    private void cargarHabitacionesDisponibles() {
        DAOHabitacion dao = new DAOHabitacion();
        List<Habitacion> disponibles = dao.listarHabitacionesPorEstado("Disponible");

        modelo.setRowCount(0); // Limpiar tabla

        for (Habitacion h : disponibles) {
            modelo.addRow(new Object[]{
                h.getId(),
                h.getTipo(),
                h.getPrecio(),
                h.getEstado()
            });
        }
    }

    private void agregarEventoClick() {
        tablaHabitaciones.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int fila = tablaHabitaciones.getSelectedRow();
                if (fila >= 0) {
                    int idHabitacion = (int) tablaHabitaciones.getValueAt(fila, 0);
                    abrirCalendario(idHabitacion);
                }
            }
        });
    }
    private double obtenerPrecioPorDia(int idHabitacion) {
    DAOHabitacion dao = new DAOHabitacion();
    List<Habitacion> disponibles = dao.listarHabitacionesPorEstado("Disponible");
    for (Habitacion h : disponibles) {
        if (h.getId() == idHabitacion) {
            return h.getPrecio();
        }
    }
    return 0.0;
}

   private void abrirCalendario(int idHabitacion) {
    double precioPorDia = obtenerPrecioPorDia(idHabitacion); // m√©todo para obtener el precio
    CalendarioForm calendario = new CalendarioForm(idHabitacion, cliente, precioPorDia);
    calendario.setVisible(true);
}
   


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaHabitaciones = new javax.swing.JTable();
        btnVerHistorial = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("PANEL CLIENTE");

        tablaHabitaciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaHabitaciones);

        btnVerHistorial.setText("Ver historial");
        btnVerHistorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerHistorialActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 498, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(139, 139, 139))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnVerHistorial, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(77, 77, 77))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 82, Short.MAX_VALUE)
                .addComponent(btnVerHistorial)
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnVerHistorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerHistorialActionPerformed
         HistorialClienteForm historial = new HistorialClienteForm(cliente);
    historial.setVisible(true);
    }//GEN-LAST:event_btnVerHistorialActionPerformed

    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnVerHistorial;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaHabitaciones;
    // End of variables declaration//GEN-END:variables
}
